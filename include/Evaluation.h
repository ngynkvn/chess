#ifndef EVALUATION_H
#define EVALUATION_H

#include "Board.h"
#include "Move.h"
#include "Search.h"
#include <vector>

Move mini_max(const Board &);
// Depth first search tree which implements alpha-beta pruning
int mini_max(const Board & currBoard, int depth, int alpha, int beta, bool is_max_player);

// evaluates the current board state
int evaluate(const Board& currBoard);

// gets the value of a piece at a give location
int get_piece_value(Piece p, int x, int y);

//calls generateMoveList, makes each move and appends to vector to be processed later.
std::vector<Board> get_states(const Board& curr);

// board evaluation tables

// Pawn evaluation tables
const int white_pawn_eval[8][8] = {{  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0  },
                                   {  5 ,  10,  10, -20, -20,  10,  10,  5  },
                                   {  5 ,  -5, -10,  0 ,  0 , -10,  -5,  5  },
                                   {  0 ,  0 ,  0 ,  20,  20,  0 ,  0 ,  0  },
                                   {  5 ,  5 ,  10,  25,  25,  10,  5 ,  5  },
                                   {  10,  10,  20,  30,  30,  20,  10,  10 },
                                   {  50,  50,  50,  50,  50,  50,  50,  50 },
                                   {  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0  }};



const int black_pawn_eval[8][8] = {{  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0  },
                                   {  50,  50,  50,  50,  50,  50,  50,  50 },
                                   {  10,  10,  20,  30,  30,  20,  10,  10 },
                                   {  5 ,  5 ,  10,  25,  25,  10,  5 ,  5  },
                                   {  0 ,  0 ,  0 ,  20,  20,  0 ,  0 ,  0  },
                                   {  5 ,  -5, -10,  0 ,  0 , -10,  -5,  5  },
                                   {  5 ,  10,  10, -20, -20,  10,  10,  5  },
                                   {  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0  }};

// Knight evaluation tables
const int black_knight_eval[8][8] = {{ -50, -40, -30, -30, -30, -30, -40, -50 },
                                     { -40, -20,  0 ,  0 ,  0 ,  0 , -20, -40 },
                                     { -30,  0 ,  10,  15,  15,  10,  0 , -30 },
                                     { -30,  5 ,  15,  20,  20,  15,  5 , -30 },
                                     { -30,  0 ,  15,  20,  20,  15,  0 , -30 },
                                     { -30,  5 ,  10,  15,  15,  10,  5 , -30 },
                                     { -40, -20,  0 ,  5 ,  5 ,  0 , -20, -40 },
                                     { -50, -40, -30, -30, -30, -30, -40, -50 }};

const int white_knight_eval[8][8] = {{ -50, -40, -30, -30, -30, -30, -40, -50 },
                                     { -40, -20,  0 ,  5 ,  5 ,  0 , -20, -40 },
                                     { -30,  5 ,  10,  15,  15,  10,  5 , -30 },
                                     { -30,  0 ,  15,  20,  20,  15,  0 , -30 },
                                     { -30,  5 ,  15,  20,  20,  15,  5 , -30 },
                                     { -30,  0 ,  10,  15,  15,  10,  0 , -30 },
                                     { -40, -20,  0 ,  0 ,  0 ,  0 , -20, -40 },
                                     { -50, -40, -30, -30, -30, -30, -40, -50 }};

// Bishop evaluation tables
const int black_bishop_eval[8][8] = {{ -20, -10, -10, -10, -10, -10, -10, -20 },
                                     { -10,  0 ,  0 ,  0 ,  0 ,  0 ,  0 , -10 },
                                     { -10,  0 ,  5 ,  10,  10,  5 ,  0 , -10 },
                                     { -10,  5 ,  5 ,  10,  10,  5 ,  5 , -10 },
                                     { -10,  0 ,  10,  10,  10,  10,  0 , -10 },
                                     { -10,  10,  10,  10,  10,  10,  10, -10 },
                                     { -10,  5 ,  0 ,  0 ,  0 ,  0 ,  5 , -10 },
                                     { -20, -10, -10, -10, -10, -10, -10, -20 }};

const int white_bishop_eval[8][8] = {{ -20, -10, -10, -10, -10, -10, -10, -20 },
                                     { -10,  5 ,  0 ,  0 ,  0 ,  0 ,  5 , -10 },
                                     { -10,  10,  10,  10,  10,  10,  10, -10 },
                                     { -10,  0 ,  10,  10,  10,  10,  0 , -10 },
                                     { -10,  5 ,  5 ,  10,  10,  5 ,  5 , -10 },
                                     { -10,  0 ,  5 ,  10,  10,  5 ,  0 , -10 },
                                     { -10,  0 ,  0 ,  0 ,  0 ,  0 ,  0 , -10 },
                                     { -20, -10, -10, -10, -10, -10, -10, -20 }};

// Rook evaluation tables
const int black_rook_eval[8][8] = {{ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0  },
                                   { 5 , 10, 10, 10, 10, 10, 10, 5  },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { 0 , 0 , 0 , 5 , 5 , 0 , 0 , 0  }};


const int white_rook_eval[8][8] = {{ 0 , 0 , 0 , 5 , 5 , 0 , 0 , 0  },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { 5 , 10, 10, 10, 10, 10, 10, 5  },
                                   { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0  }};

// Queen evaluation tables
const int black_queen_eval[8][8] = {{ -20, -10, -10,  -5,  -5, -10, -10, -20 },
                                    { -10,  0 ,  0 ,  0 ,  0 ,  5 ,  0 , -10 },
                                    { -10,  0 ,  5 ,  5 ,  5 ,  5 ,  5 , -10 },
                                    {  -5,  0 ,  5 ,  5 ,  5 ,  5 ,  0 ,  -5 },
                                    {  -5,  0 ,  5 ,  5 ,  5 ,  5 ,  0 ,  -5 },
                                    { -10,  5 ,  5 ,  5 ,  5 ,  5 ,  0 , -10 },
                                    { -10,  0 ,  5 ,  0 ,  0 ,  0 ,  0 , -10 },
                                    { -20, -10, -10,  -5,  -5, -10, -10, -20 }};

const int white_queen_eval[8][8] = {{ -20, -10, -10,  -5,  -5, -10, -10, -20 },
                                    { -10,  0 ,  5 ,  0 ,  0 ,  0 ,  0 , -10 },
                                    { -10,  5 ,  5 ,  5 ,  5 ,  5 ,  0 , -10 },
                                    {  -5,  0 ,  5 ,  5 ,  5 ,  5 ,  0 ,   0 },
                                    {  -5,  0 ,  5 ,  5 ,  5 ,  5 ,  0 ,  -5 },
                                    { -10,  0 ,  5 ,  5 ,  5 ,  5 ,  5 , -10 },
                                    { -10,  0 ,  0 ,  0 ,  0 ,  5 ,  0 , -10 },
                                    { -20, -10, -10,  -5,  -5, -10, -10, -20 }};

// King evaluation tables
const int black_king_eval[8][8] = {{ -30, -40, -40, -50, -50, -40, -40, -30 },
                                   { -30, -40, -40, -50, -50, -40, -40, -30 },
                                   { -30, -40, -40, -50, -50, -40, -40, -30 },
                                   { -30, -40, -40, -50, -50, -40, -40, -30 },
                                   { -20, -30, -30, -40, -40, -30, -30, -20 },
                                   { -10, -20, -20, -20, -20, -20, -20, -10 },
                                   {  20,  20,  0 ,  0 ,  0 ,  0 ,  20,  20 },
                                   {  20,  30,  10,  0 ,  0 ,  10,  30,  20 }};


const int white_king_eval[8][8] = {{  20,  30,  10,  0 ,  0 ,  10,  30,  20 },
                                   {  20,  20,  0 ,  0 ,  0 ,  0 ,  20,  20 },
                                   { -10, -20, -20, -20, -20, -20, -20, -10 },
                                   { -20, -30, -30, -40, -40, -30, -30, -20 },
                                   { -30, -40, -40, -50, -50, -40, -40, -30 },
                                   { -30, -40, -40, -50, -50, -40, -40, -30 },
                                   { -30, -40, -40, -50, -50, -40, -40, -30 },
                                   { -30, -40, -40, -50, -50, -40, -40, -30 }};

#endif