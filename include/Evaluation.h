#ifndef EVALUATION_H
#define EVALUATION_H

#include "Board.h"
#include "Move.h"
#include "Search.h"
#include <vector>

Move mini_max(const Board &);
// Depth first search tree which implements alpha-beta pruning
int mini_max(const Board & currBoard, int depth, int alpha, int beta, bool is_max_player);

// evaluates the current board state
int evaluate(const Board& currBoard);

// gets the value of a piece at a give location
int get_piece_value(Piece p, int x, int y, bool is_end);

// calls generateMoveList, makes each move and appends to vector to be processed later.
std::vector<Board> get_states(const Board& curr);

// is the game in end game scenarios
bool is_end_game(const Board &);

//Material weights
const int material[] = {100,320,325,500,975,32767};

/*
 * POSITION TABLES
 * 
 * The tables below are responsible for evaluating a given position in our algorithm adn assign weights
 * to the best possible outcomes in a game. These power the evaluate() function which allow the minimax algorithm to 
 * make objective decisions during gameplay.
 */

// Position tables
// Pawn table
const int black_pawn_table[8][8] = {{  0,   0,   0,   0,   0,   0,   0,   0},
                                    { 50,  50,  50,  50,  50,  50,  50,  50},
                                    { 10,  10,  20,  30,  30,  20,  10,  10},
                                    {  5,   5,  10,  27,  27,  10,   5,   5},
                                    {  0,   0,   0,  25,  25,   0,   0,   0},
                                    {  5,  -5, -10,   0,   0,  10,  -5,   5},
                                    {  5,  10 , 10, -25, -25,  10,  10,   5},
                                    {  0,   0,   0,   0,   0,   0,   0,   0}};

const int white_pawn_table[8][8] = {{  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0  },
                                    {  5 ,  10,  10, -20, -20,  10,  10,  5  },
                                    {  5 ,  -5, -10,  0 ,  0 , -10,  -5,  5  },
                                    {  0 ,  0 ,  0 ,  20,  20,  0 ,  0 ,  0  },
                                    {  5 ,  5 ,  10,  25,  25,  10,  5 ,  5  },
                                    {  10,  10,  20,  30,  30,  20,  10,  10 },
                                    {  50,  50,  50,  50,  50,  50,  50,  50 },
                                    {  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0  }};

// Knight table
const int black_knight_table[8][8] = {{ -50, -40, -30, -30, -30, -30, -40, -50},
                                      { -40, -20,  0 ,  0 ,  0 ,  0 , -20, -40},
                                      { -30,  0 ,  10,  15,  15,  10,  0 , -30},
                                      { -30,  5 ,  15,  20,  20,  15,  5 , -30},
                                      { -30,  0 ,  15,  20,  20,  15,  0 , -30},
                                      { -30,  5 ,  10,  15,  15,  10,  5 , -30},
                                      { -40, -20,  0 ,  5 ,  5 ,  0 , -20, -40},
                                      { -50, -40, -30, -30, -30, -30, -40, -50}};

const int white_knight_table[8][8] = {{ -50, -40, -30, -30, -30, -30, -40, -50 },
                                      { -40, -20,  0 ,  5 ,  5 ,  0 , -20, -40 },
                                      { -30,  5 ,  10,  15,  15,  10,  5 , -30 },
                                      { -30,  0 ,  15,  20,  20,  15,  0 , -30 },
                                      { -30,  5 ,  15,  20,  20,  15,  5 , -30 },
                                      { -30,  0 ,  10,  15,  15,  10,  0 , -30 },
                                      { -40, -20,  0 ,  0 ,  0 ,  0 , -20, -40 },
                                      { -50, -40, -30, -30, -30, -30, -40, -50 }};

// Bishop table
const int black_bishop_table[8][8] = {{ -20, -10, -10, -10, -10, -10, -10, -20},
                                      { -10,  0 ,  0 ,  0 ,  0 ,  0 ,  0 , -10},
                                      { -10,  0 ,  5 ,  10,  10,  5 ,  0 , -10},
                                      { -10,  5 ,  5 ,  10,  10,  5 ,  5 , -10},
                                      { -10,  0 ,  10,  10,  10,  10,  0 , -10},
                                      { -10,  10,  10,  10,  10,  10,  10, -10},
                                      { -10,  5 ,  0 ,  0 ,  0 ,  0 ,  5 , -10},
                                      { -20, -10, -40, -10, -10, -40, -10, -20}};


const int white_bishop_table[8][8] = {{ -20, -10, -10, -10, -10, -10, -10, -20 },
                                      { -10,  5 ,  0 ,  0 ,  0 ,  0 ,  5 , -10 },
                                      { -10,  10,  10,  10,  10,  10,  10, -10 },
                                      { -10,  0 ,  10,  10,  10,  10,  0 , -10 },
                                      { -10,  5 ,  5 ,  10,  10,  5 ,  5 , -10 },
                                      { -10,  0 ,  5 ,  10,  10,  5 ,  0 , -10 },
                                      { -10,  0 ,  0 ,  0 ,  0 ,  0 ,  0 , -10 },
                                      { -20, -10, -10, -10, -10, -10, -10, -20 }};

// Rook table
const int black_rook_table[8][8] = {{  0,  0,  0,  5,  5,  0,  0,  0},
                                    { -5,  0,  0,  0,  0,  0,  0, -5},
                                    { -5,  0,  0,  0,  0,  0,  0, -5},
                                    { -5,  0,  0,  0,  0,  0,  0, -5},
                                    { -5,  0,  0,  0,  0,  0,  0, -5},
                                    { -5,  0,  0,  0,  0,  0,  0, -5},
                                    {  5, 10, 10, 10, 10, 10, 10,  5},
                                    {  0,  0,  0,  0,  0,  0,  0,  0}};
                                    
const int white_rook_table[8][8] = {{ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0  },
                                   { 5 , 10, 10, 10, 10, 10, 10, 5  },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { -5, 0 , 0 , 0 , 0 , 0 , 0 , -5 },
                                   { 0 , 0 , 0 , 5 , 5 , 0 , 0 , 0  }};

// Queen table
const int white_queen_table[8][8] = {{ -20, -10, -10, -5, -5, -10, -10, -20},
                                     { -10,   0,   5,  0,  0,   0,   0, -10},
                                     { -10,   5,   5,  5,  5,   5,   0, -10},
                                     {  -5,   0,   5,  5,  5,   5,   0,   0},
                                     {  -5,   0,   5,  5,  5,   5,   0,  -5},
                                     { -10,   0,   5,  5,  5,   5,   5, -10},
                                     { -10,   0,   0,  0,  0,   5,   0, -10},
                                     { -20, -10, -10, -5, -5, -10, -10, -20}};

const int black_queen_table[8][8] = {{ -20, -10, -10,  -5,  -5, -10, -10, -20 },
                                     { -10,  0 ,  0 ,  0 ,  0 ,  5 ,  0 , -10 },
                                     { -10,  0 ,  5 ,  5 ,  5 ,  5 ,  5 , -10 },
                                     {  -5,  0 ,  5 ,  5 ,  5 ,  5 ,  0 ,  -5 },
                                     {  -5,  0 ,  5 ,  5 ,  5 ,  5 ,  0 ,  -5 },
                                     { -10,  5 ,  5 ,  5 ,  5 ,  5 ,  0 , -10 },
                                     { -10,  0 ,  5 ,  0 ,  0 ,  0 ,  0 , -10 },
                                     { -20, -10, -10,  -5,  -5, -10, -10, -20 }};

// King mid-game table
const int black_king_mid_table[8][8] = {{ -30, -40, -40, -50, -50, -40, -40, -30},
                                        { -30, -40, -40, -50, -50, -40, -40, -30},
                                        { -30, -40, -40, -50, -50, -40, -40, -30},
                                        { -30, -40, -40, -50, -50, -40, -40, -30},
                                        { -20, -30, -30, -40, -40, -30, -30, -20},
                                        { -10, -20, -20, -20, -20, -20, -20, -10},
                                        {  20,  20,  0 ,  0 ,  0 ,  0 ,  20,  20},
                                        {  20,  30,  10,  0 ,  0 ,  10,  30,  20}};

const int white_king_mid_table[8][8] = {{  20,  30,  10,  0 ,  0 ,  10,  30,  20 },
                                        {  20,  20,  0 ,  0 ,  0 ,  0 ,  20,  20 },
                                        { -10, -20, -20, -20, -20, -20, -20, -10 },
                                        { -20, -30, -30, -40, -40, -30, -30, -20 },
                                        { -30, -40, -40, -50, -50, -40, -40, -30 },
                                        { -30, -40, -40, -50, -50, -40, -40, -30 },
                                        { -30, -40, -40, -50, -50, -40, -40, -30 },
                                        { -30, -40, -40, -50, -50, -40, -40, -30 }};

// King end-game table
const int white_king_end_table[8][8] = {{ -50, -30, -30, -30, -30, -30, -30, -50},
                                        { -30, -30,   0,   0,   0,   0, -30, -30},
                                        { -30, -10,  20,  30,  30,  20, -10, -30},
                                        { -30, -10,  30,  40,  40,  30, -10, -30},
                                        { -30, -10,  30,  40,  40,  30, -10, -30},
                                        { -30, -10,  20,  30,  30,  20, -10, -30},
                                        { -30, -20, -10,   0,   0, -10, -20, -30},
                                        { -50, -40, -30, -20, -20, -30, -40, -50}};
                                        
const int black_king_end_table[8][8] = {{ -50, -40, -30, -20, -20, -30, -40, -50},
                                        { -30, -20, -10,   0,   0, -10, -20, -30},
                                        { -30, -10,  20,  30,  30,  20, -10, -30},
                                        { -30, -10,  30,  40,  40,  30, -10, -30},
                                        { -30, -10,  30,  40,  40,  30, -10, -30},
                                        { -30, -10,  20,  30,  30,  20, -10, -30},
                                        { -30, -30,   0,   0,   0,   0, -30, -30},
                                        { -50, -30, -30, -30, -30, -30, -30, -50}};

#endif